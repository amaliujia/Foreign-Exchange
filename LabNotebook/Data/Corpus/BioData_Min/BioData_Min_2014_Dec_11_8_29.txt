Background
Researchers have discovered that the human genome is a complex network system. With the Human Genome Project (HGP), we step into a post-genome era. The network motif [,] is generally represented as the smallest unit in a network. Motif analysis is increasingly recognized as a powerful approach to identify the function structure of a network, its organizational principle and species evolution.

The network motif was first defined systematically in Escherichia coli. After this, algorithms regarding network motif mining were developed. Kashtan, Itzkovita, Milo and Alon [] proposed the Edge Sampling Algorithm (ESA), which unfortunately leads to sampling deviation and causes error. Wernicke [] described an algorithm for enumerating sub-graphs, named Enumerating Subgraph (ESU for short), which allows for a faster detection of network motifs and offers useful additional features. Considerable work has been made concerning subgraph searching, and we select the RAND-ESU method for its performance and unbiased estimation [,]. Meanwhile, the generating random network model is a key to identifying motifs. We adopt the standard null model [,], in which the degree of every node is not allowed to change, such that single node properties are fixed. Lau and So. [] proposed the Markov Chain Algorithm to generate random networks [], and we use it to construct the random networks for this paper. In addition, sub-graphs are another key to finding motifs because sub-graph isomorphism is an NP-complete problem [,]. In order to solve this problem, a method aimed at reducing the searching size was introduced by Ding and Huang []. An algorithm to reduce the complexity of matching two graphs was proposed by Knossow,Sharma, Mateus and Horaud []. Another algorithm that optimizes the one-to-many matching problem was introduced by Ogras and Marculescu []. Moreover, some more recent algorithms have been developed [], based on the G-trie method to list all stored subgraphs and the implicit tree method [] to finding motifs of a size greater than eight. Liao and Chen [] presented the Depth-First Spelling algorithm for mining sequential patterns of biological sequences with Gap constraints (termed DFSG). Zhang and Lu [] employed a network stratification strategy to investigate the validity of the current network analysis of conglomerate PPI networks, finding that network stratification may help to resolve many controversies in the current research of systems biology. Srinivasan,Vural, King and Guda [] presented a new substitution-based scoring function for identifying discriminative lower denominations that are highly specific to a class. Unfortunately, some of these methods, designed for both directed and undirected graphs, proved to be time-consuming. The aim of this paper is to achieve a method for reducing the searching time storage space required for a motif mining algorithm, while storing all sub-graphs.

We enumerate all sub-graphs that meet the requirements of a given graph by way of reducing the searching space. Then, the associated matrices of these sub-graphs are normalized and the isomorphic sub-graphs are uniquely marked. Through experiment, we verify the accuracy and extensive applicability of our algorithm, and improve the searching speed of sub-graphs enumeration.

In the following, we give some definitions:

Definition 1
The Network motif is generally represented as a topological pattern that occurs more often in a given network than in random networks, and takes on a certain function in practical biological applications. We utilize graph theory to research network. A sub-graph is considered as a Network Motif when the following conditions are met [,]:The frequency P &lt; 0.01, from 1000 randomized networks.

The number of sub-graph in the input graph Nreal is larger than four.

SetNreal as the number of sub-graphs in the input graph, Nrand as the mathematical expectation of the random graphs, the following inequality should be satisfied: Nreal − Nrand &gt; 0.1Nrand.



Definition 2
A Network is considered to be a large graph consisting of vertices and edges. A directed graph (or network) is usually indicated as G = (V, E), where V stands for a finite set of nodes in the graph and E the edges. Edge e = (u, v) ⊆ E represents an edge starting from the node u (the source) to the node v (the target).

Definition 3
In a graph G = (V, E), any two nodes Vi and Vj that meet the following requirement are called Parity nodes [].

i) Both in-degree and out-degree of Vi and Vj are the same, stated as 

Definition 4
The frequency partition of a graph (simple graph) is a partition of its vertices grouped by their degree [].

Definition 5
Two sub-graphs G = (V1, E1) and G/(V2, E2) are Sub-graph isomorphic [] if there is a one-to-one correspondence between their vertices, stated as f: v1 → v2, and also there is an edge correspondence g: e1 → e2, directed from one node to another node within one sub-graph. e1 ∈ E1, Ψ1(e) = &lt; u, v &gt; if and only if there is another edge with the same direction between the corresponding vertices in the other sub-graph Ψ2(g(e)) = &lt; f(u), f(v) &gt; .

Figure  is an example of parity nodes and Figure  shows the isomorphism visually.
An example of parity nodes.



An illustration of isomorphic graphs.




Methods
In this paper, we provide a new approach for motif mining based on compressing the searching space. Firstly, we use the associated matrices to store directed graphs, and then utilize parity nodes to compress searching space. Secondly, we use Back Tracking to enumerate all sub-graphs of a given size that occur in the input graph which are obtained from real graphs and random graphs. Thirdly, we normalize the associated matrix and mark isomorphism sub-graphs uniquely, by using the Symmetric Ternary to simulate the elements (−1, 0,1) in the associated matrix. And finally, we distinguish motifs among all the sub-graphs found on the basis of statistical parameters to identify it whether or not.

Store graphs
The storage of graphs is the first step in the process of solving the motif-mining problem. The associated matrix is easy to compress and thus it is easy to know the size of a sub-graph, so we use the associated matrix to store real graphs and random graphs.

An associated matrix M(G) shows the connection between the nodes and edges of G. It is usually not a square matrix, shown as Figure 
An example of an associate matrix, showing the corresponding relationship between a graph and a form of storage.




In this matrix, a row represents nodes, a column edges, and the algebraic sum of all elements is zero in M(G). In the matrix M(G), the sum of out-degree and in-degree are both equal to the number of edges, stated as .

Sub-graph mark and isomorphism
As is well known, the sub-graph isomorphism is an NP-complete [] problem among the different types of graph matching algorithms. The required time increases exponentially with the size of the input sub-graphs. For an N-vertex sub-graph, the number of the node label permutation is N!. In addition, there is a difficult problem using the associated matrix to store graphs, because an element represents both the connection relationship and orientation directly, such as “-1”. Therefore, we need to adopt the concept of symmetrical three hexadecimal to extracting the matrix row by row for get sequence of symmetric ternary, and the symmetric ternary sequence is a Code number that is unique for each isomorphic class. In order to mark each graph uniquely, we need to standardize the associated matrix, which is useful for sub-graph isomorphism as it can reduce the complexity of sub-graph isomorphism and improve the efficiency of the searching. The detailed process of the standardization of the associated matrix can be referred to as [].



From this example, we know that after two similar matrices get elementarily transformed; we can get the same matrix and a unique Code. One Code marks an isomorphic class. We just have to count the same values of the Codes to detect the motif. We confirm the sufficiency and necessity of this unique mark theoretically, this being outlined below:

The sufficiency
If isomorphism exists, their associated matrix is similar matrix. According to the properties of the elementary transformation of matrix, similar matrices will become the same matrix after elementary transformation, and so their Code values are the same, and the mark the isomorphism class is the only.

The necessity
If the following conditions are met between two matrices, we can say that the two matrices are equal: the sizes (the row and column of matrix) of sub-graphs are the same; both the numbers of out-degree and that of in-degree are respectively equal; and so the matrices have the same Code value, and furthermore the corresponding symmetrical ternary number are the same. Under this condition, all the corresponding elements of these matrices are the same. Therefore, we can conclude that these matrices are equal and so they satisfy the requirement of uniqueness.

Space compression
It appears that there is more than one parity node in a graph. The structure and function of these nodes are similar, and the topological network characteristics of these nodes are completely the same. According to the features of the parity nodes, exchanging two nodes doesn’t affect the topological structure of the whole network. This means that the corresponding associated matrices are similar after exchanging the parity nodes, as can be seen in Figure .
The nodes 2 and 4 are parity nodes. After exchanging their positions, the associated matrices remain similar and these two matrices can get into the same form by elementary transformation, thus possessing the same Code.



We perform a pre-treatment of the searching space before enumerating the sub-graphs. In this pre-treatment, we first identify the parity nodes. In a group of parity nodes, we remove all except the node with the minimum mark number such that the network has no pairs of parity nodes, and then search directly into the network. Finally, we determine the network motifs.

In Figure , v1, v2 represent vertex 1 and 2, respectively, and they are the remaining vertex after compression, e1 is the edge linking v1 and v2. Gr, Gp, Gcv represent the nodes and edges that remain after compression, the parity nodes that are removed and the vertex and edges connected with the parity nodes, respectively. Upon finishing the compression, we conduct a sub-graph search. At this point, we shall see that the space we need to search is considerably reduced. If we want to search a sub-graph with a specific topological structure, for instance (1,2,5), we need not go through the whole graph to find all sub-graphs with this topology, meaning that searching for sub-graphs like (2,3,5), (1,2,2), (1,4,5), (3,4,5), (1,3,4) is unnecessary. The aforementioned sub-graphs can be stored in Gcv and Gp. What we need to do is replace the parity nodes correspondingly and make sure there is no repeating. In this way the searching time is reduced.
Two groups of nodes: 2, 4 and 1, 3, 5. The tablet is storage format of network after compression.



Enumerating Sub-graphs
Back Tracking [] is often used to search the optimal solutions of complex problems. It enumerates a set of partial candidates, in which we keep just the initial and the end node of a path. We also reduce the space complexity using the method of saving storage space.

We aim to enumerate all sub-graphs of a given size that occur in the real graph, and then we combine the method for enumerating all sub-graphs (Back Tracking) with that for compressing space. The hybrid algorithm can reduce the complexity of the sub-graphs enumeration and the searching time. The process of enumerating sub-graphs [] can be read for reference.

Results and discussion
In this section, we will apply our method to some real networks in order to verify the validity. We evaluate our method on the metabolic pathway of the bacteria E. coli, the transcription network of Yeast, the Sea Urchin network, and an electronic network. These can be freely obtained online at http://www.weizmann.ac.il/UriAlon/groupNetworksData.html [].

Effectiveness of the algorithm
Table  shows the numbers and structures of motifs with different sizes observed in some different networks, and in this table, we enumerate the number of the sub-graphs that occurred in the real network and the Code that marks them with different numbers of edge in these networks.[] A summary of Code values and the topological structures in different networks



Network
	
Nodes
	
Edges
	
Size-N
	
Code
	
Motif
	

E coli
	423	519	3	8528	

	
4	12925664	

	
236808	

	

S208
	122	189	3	5668	

	
4	13698880	

	
12925664	

	

S420
	252	399	3	5668	

	
4	12925664	

	
13698880	

	

S838
	512	819	3	5668	

	
4	12925664	

	
13698880	

	
In this table, the fourth column contains the numbers of motifs in the real network.

The fifth column contains the unique Code values that represent the isomorphic class, and the sixth column has the topological structures of these motifs.



In Table , the different numbers of edges and nodes embody the differences between networks. Most motifs are similar in the different networks, but small parts are different. If motifs have the same topological structure, their Codes shall be the same. This proves the accuracy of the unique mark of isomorphic sub-graphs, and also that of our algorithm. In addition, our method achieves the motif mining in different kinds of networks, and it proves that our method is both valid and extensively applicable.

The results of compression
In order to judge the performance of our method, we carry out a series of experiments on a set of testing data. The performance of the method is evaluated by the consumption time. We enumerate all sizes of sub-graphs for testing, and then compare them with method []. There are no parity nodes in the electronic circuit network, so the searching time remains unchanged. However, we can compress the searching space in the network based on the properties of parity nodes.

In a network, the searching time is different when the size of the sub-graph is different. For instance as can be seen in Table , the S208 network costs 0.001 seconds when there are three nodes in the sub-graph, and 2.9 seconds when there are eight nodes. With increasing size, the searching time is amplified tenfold. It shows that the searching time is directly proportional to the size of the sub-graph. We will now compare the results displayed in Table .
List of searching times for different networks before compression



Time(s)
	
Size 3
	
Size 4
	
Size 5
	
Size 6
	
Size7
	
Size 8
	
N(edges) before compression
	
N(nodes) before compression
	

Networks
	
Yeast	0.013	1.860	31.281				1079	688	
E coli	0.031	0.469	8.844				519	423	
S208	0.001	0.002	0.031	0.125	0.579	2.953	189	122	
S420	0.001	0.031	0.110	0.563	3.141	17.734	399	252	
S838	0.063	0.110	0.500	2.843	17.204		819	512	
The first column contains the names of different networks; the 2 through 8 columns contain the sizes of sub-graphs, and consumption time.


List of searching times for different networks after compression



Time(s)
	
Size 3
	
Size 4
	
Size 5
	
Size 6
	
Size7
	
Size 8
	
N(edges) after compression
	
N(nodes) after compression
	

Networks
	
Yeast	0.031	0.344	4.031				615	345	
E coli	0.016	0.266	4.141				320	256	
S208	0.001	0.002	0.031	0.125	0.579	2.953	189	122	
S420	0.001	0.031	0.110	0.563	3.141	17.734	399	252	
S838	0.063	0.110	0.500	2.843	17.204		819	512	
The last two columns in this table contain the sizes of networks after reducing the parity nodes and the “repeated edges” connected with the parity nodes.



After compressing the searching space, we list the searching time in different networks with different sizes in Table . To avoid repeated searching, we only search one of the parity nodes and remove the edges connected with the with parity nodes which were abandoned. In this way we obtain a compressed network; the random network shall be compressed in the same way, which ensures that the random network can be used as a reference. This approach also ensures consistency of a sub-graph regardless of whether it is a network motif.

By comparing Table  with Table , it can be seen that there are no parity nodes in the electronic circuit networks, such as S208, S420, or S838. Therefore, the time for searching sub-graphs with different nodes is the same before and after compression. The subtle gaps between the results and the original results can be neglected. As for the biological networks with parity nodes, however, the more parity nodes that exist the more obvious the effect of compression is. In the example of the yeast network, the number of the parity nodes is 343, half the number of total nodes. The time for searching sub-graphs is greatly reduced after compression. With increasing numbers of sub-graphs, the efficiency of searching increases up to 10 times for 4-node sub-graphs. Of course, the efficiency of searching depends on the size of the network as well as the size of the sub-graph searched for, and the current hardware environment. In any network, the searching time is different when the size of sub-graph is different.

Through comparison of Tables  and , we confirm that the method of compressing the searching space based on the property of parity nodes is feasible, and the efficiency of searching is greatly improved by saving storage space. The advantage is particularly evident for a network with many parity nodes. This is a new attempt that ensures the identification of network motifs correctly while also improving the efficiency of searching.

Comparison of searching times
In the previous sections, we have confirmed the effectiveness, accuracy and extensive applicability of our method. We have also confirmed the smaller search space and storage space obtained through the compression of parity nodes. In this section, we will compare the results obtained with our algorithm with those from alternative methods [,,,]. Due to the limitations of the Feature compression for clustering graphs (FCGI) algorithm [], we only tested and compared the Yeast network, and due to the limitations of network data just the results obtained for the E. coli network were compared to the other algorithms [,,]. The comparison results are displayed in Figure  and Table .
Comparison of results from different algorithms. The height of the blue cuboid is the consumption time before compressing the network, while the green cuboid is the consumption time after compressing the network. They are compared with the red cuboid (Rand-ESU in paper []). The x-coordinate denotes the size of sub-graph, the y-coordinate denotes the searching time.


Computational cost for different algorithms on the E. coli network



Time(s)
	
Size 3
	
Size 4
	
Size 5
	
Size 6
	
Size 7
	
Size 8
	

Algorithms
	
Before compression	0.031	0.469	8.844				
After compression	0.016	0.266	4.141				
Kavosh	0.300	1.840	14.910	141.98	1374.01	13173.74	
Fanmod	0.810	2.530	15.710	132.24	1205.97	9256.61	
Mfinder	31.000	297.000	23671.80				
Rows indicate different sizes of sub-graph and columns are related to different algorithms, times are in seconds.



The comparison between our method and the FCGI method was performed on the same computer environment: Intel (R)Core(TM) i3 CPU, 2.53 GHZ work station, 1.8 G RAM, Windows XP operating system, and Visual C++ 6.0. This ensures that the comparison is meaningful.

In Figure , algorithm performance is evaluated with the consumption time, using the yeast network as a testing data. Searching for sub-graphs in a network is the most important part of the motif mining process. The efficiency of sub-graph enumeration is, therefore, an important standard with which to measure the quality of an algorithm. In reference [], the sub-graphs are enumerated by the Rand-ESU algorithm. When there are only three and four nodes, there is only a subtle difference between the time spent on enumerating sub-graphs by Back Tracking algorithm compared with Rand-ESU; this gap is negligible and can be ignored. However, with more than five nodes, the time spent even before compressing the searching space is considerably shorter than that by Rand-ESU, with an improvement of 27 seconds. Most striking is that after compressing the searching space the time needed is a lot shorter than Rand-ESU, with an improvement of 15 times (our algorithm’s consumption time is about one twelfth of the time in Rand-ESU).

The algorithm of Mfinder can only search a small range of sizes, and its computational cost is the highest. The FANMOD algorithm, able to find sub-graphs and isomorphic groups of sizes up to eight, results in the identification of the same numbers as Kavosh. The searching time of the Kavosh is less than that of FANMOD. With our algorithm, while the size of sub-graphs is limited to a maximum of five, the searching time is shortest.

The references [,,], are performed on superior computer hardware than our algorithm: Intel (R)Core(TM) 2 Quad CPU, 3.2 GHZ work station, 8 G RAM. This means that the increase in speed obtained with our algorithm may be even higher.

Conclusion
In this paper, we presented a method for mining network motifs based on space compression. All sub-graphs can be enumerated by adding edges and nodes progressively in a Back Tracking algorithm, which saves storage space and reduces space complexity as only the initial and end nodes of the path are counted. By taking advantages of the parity nodes, a much more efficient solution for enumerating sub-graphs during the motif mining is provided. Particularly for networks with high ratio of parity nodes, the time spent on enumerating the sub-graphs is reduced significantly compared with other common algorithms. From the results obtained, we have proved the accuracy and effectiveness of our method. By comparing the results of our method with others, we can conclude that our approach has considerably shorter searching times and more extensive applicability.

Competing interests

The authors declare that they have no competing interests.

Authors’ contributions

QZ conceived and designed the experiments and YX carried out the experiments. Both QZ and YX analyzed the data. YX drafted the manuscript and QZ improved some writing. Both authors read and approved the final manuscript.

Acknowledgement
This work is supported by the National Natural Science Foundation of China (No. 31370778), Program for Changjiang Scholars and Innovative Research Team in University (No. IRT1109) and by the Program for Liaoning Key Lab of Intelligent Information Processing and Network Technology in University.

