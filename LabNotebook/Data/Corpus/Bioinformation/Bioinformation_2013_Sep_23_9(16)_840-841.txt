Background
Next-generation sequencing technologies (NGS) revolutionized
biology, as they reduced costs and increased the speed of
genome sequencing, consequently generating large amounts of
data compared with the Sanger method [].

However, challenges have emerged, such as processing the
large amounts of data generated by such platforms, especially
without a robust computer infrastructure, and conducting
genome assembly from short reads, which requires multiple
software programs and parameters for optimization 
[–]. The
primary assemblers include Velvet, ABySS, AllPaths,
SOAPdenovo and MAQ [].

Most such assemblers operate through lengthy command lines
composed of one or several parameters that influence the
assembly results, which can be difficult for users with little
computing experience [–].

Thus, a graphical interface facilitates algorithm use, such as in
the VAGUE software [], which uses a graphical interface for
Velvet assembler operation that allows the user to set the
parameter values necessary for operation. However, given the
wide variety of tools available, such data analyses are limited
where a graphical interface is only available for the Velvet
assembler []. Therefore, this study presents AutoAssemblyD,
which is a graphical tool used for submitting and managing
genome assembly from different assemblers through XML
templates. This tool also facilitates assembly on remote devices
through distributed programming.

Methodology
Programming Language:
The Java programming language was used for AutoAssemblyD
development. Remote method invocation (RMI) and Socket are
used in the AutoAssemblyD application and were implemented
through the java.net and java.io package [].

The Template:
Standard Extensible Markup Language (XML) was used to
generate the templates as well as identify the assembler,
parameters and respective values in accordance with the userdefined
configuration.

Remote Management:
RMI was used to manage the remote assembly; the clients
establish communication with the server upon initiation, which
can be selected to perform the assembly process.
Communication between the clients and server is tested every 3
seconds, and the server application shows the connection status
to the user. The Socket application is used for file transfer
between the clients and server; this application initiates upon
client and server execution.

AutoAssemblyD Modules:
AutoAssemblyD is composed of two modules: local and
remote. The local module can be used when the computer has
the necessary resources (memory, disk space and CPU) to
process the data. The remote module facilitates file transfer and
remote processing; thereafter, the results are transmitted to the
server.

AutoAssemblyD:
AutoassemblyD comprises three interfaces: template creation,
template update and assembly operation. The assembler
commands, parameters and their respective values are input at
the template creation interface ().

After the assembler informations are defined, the user selects
the option creates file to generate the XML template used for
assembly operation. The template is updated through the
UpdateXML window that facilitates template reuse in future
operations with other input data and parameters, which
increases its flexibility. To operate the assembly, the template
file must be loaded, and the client that performs the process
must be selected. The user guide is available at: 
https://sourceforge.net/projects/ autoassemblyd.

This work was part of the Genomics and Proteomics Network
of Pará (Rede Paraense de Genômica e Proteômica - RPGP)
supported by the Research Foundation of the State of Pará
(Fundação de Amparo a Pesquisa do Estado do Pará -
FAPESPA), National Council for Scientific and Technological
Development (Conselho Nacional de Desenvolvimento
Científico e Tecnológico – CNPq) and Pronex Amazon Center of
Excellence in Genomics of Microorganisms (Núcleo Amazônico
de Excelência em Genômica de Microorganismos). Funding:
FAPESPA, CNPq and Coordination for the Improvement of
Higher Education Personnel (Coordenação de Aperfeiçoamento
de Pessoal de Nível Superior – CAPES).

Citation:Veras et al, Bioinformation 9(16): 840-841 (2013)

Standard window for template creation.

