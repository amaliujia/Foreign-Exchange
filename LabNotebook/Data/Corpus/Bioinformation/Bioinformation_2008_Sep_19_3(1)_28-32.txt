Background
Distant repeats are evolved by duplication and recombination of genes, which gives rise to amino acid repeats within the protein sequence []. Andrade and co-workers examined the important differences between 
certain protein families in order to study their evolution, structure, and function []. To understand more about the structural and functional relationship of the repeats in protein sequences, many types of 
repeats such as Ankyrin repeats, Armadillo repeats, HEAT repeats, TPR repeats, HAT repeats, Kelch repeats, Leucine-rich repeats etc., have been studied in detail []. To get better understanding of these repeats, 
several algorithms have been derived to find amino acid repeats in protein sequences [-]. One of the pioneers in automatic recognition of repeats using computer methods three decades ago was McLachlan []. 
McLachlan and Stewart used Fourier transform analysis techniques (autocorrelation techniques) [,] which has been followed by the development of different techniques and algorithms by other groups to find 
the distant repeats amino acid residues.

These algorithms detect patterns of amino acid distant repeats in protein sequences. Heringa and Argos introduced a method for the determination of distant repeats in protein sequences. This method looks for 
internal similarities by comparing the protein sequence to itself with standard sequence–sequence alignment techniques []. Morgenstern and coworkers introduced an algorithm where a multiple sequence alignment 
based on segment-to-segment comparison is made to find the local similarities of amino acids in protein sequence [,,]. Further, Andrade and co-workers have derived a homology-based algorithm for the 
identification of protein repeats using statistical significance []. There are other servers such as REPPER [], REPRO [], RADAR [], etc., which uses different algorithms for finding repeats in protein 
sequences. However, most of the above mentioned algorithms have restrictions in the number of residues provided in the query sequence and does not give an easily interpretable result. To overcome this, an 
algorithm has been derived from the recent algorithm FAIR [] for finding the distant repeats in a protein sequence.

The proposed algorithm utilizes the PAM (Point Accepted Mutation) matrix to calculate distant repeats. According to Dayhoff and coworkers, the residue pairs, with scores above one, replace each other more 
often as alternatives in related sequences than in random sequences during evolution. This is an indication that both the residues may carry out similar functions. A score exactly equal to one indicates amino acid 
pairs that are found as alternatives at exactly the frequency predicted by chance. Residue pairs with scores less than one replace each other less often in random sequences and would be an evidence for these 
residues to be functionally disparate. PAM250 matrix is chosen, by default, because at this evolutionary distance (250 substitutions per hundred residues) only one amino acid in five remains unchanged []. 
Thus, the proposed algorithm prevails over the constraints that have been limiting the previous algorithms.

Methodology
The algorithm finds all possible distant amino acid sequence repeats in a given protein sequence. Two amino acid strings are considered repeats, if their corresponding residues are either identical or have a 
positive PAM matrix score (greater than or equal to 1). Therefore the strings ‘KLN’ and ‘QLD’ are distant repeats based on PAM250 matrix (K with Q has a score of 1 and N with D has a score of 2 based on PAM250 matrix). 
All possible available PAM matrices are incorporated and are downloaded from the EMBL website (http://eta.embl-heidelberg.de:8000/misc/mat/). The user has the option to choose a specific PAM matrix to find the distant 
repeats in a particular protein sequence. The algorithm proposed here is derived from the recent algorithm, FAIR [] and the details are described here: 

Finding matches based on PAM matrix
Initially the protein sequence is stored in a string a1. The algorithm follows the same approach in finding repeats as in FAIR except that instead of finding an exact match, it looks for matches based on the PAM matrix 
scores. The algorithm takes the choice of matrix from the user. Then for each set of element (a1[i],a2[j]), it checks the corresponding PAM matrix whether the score is greater than one. ‘pamvalue’ is a Boolean character that 
shows true for a match and false when no such match exists. Thus, if the user gives PAM250 matrix as the choice the corresponding code will be as shown in illustration 1 in ).

Storing subsequences and repeat positions
After completion of the first part of the algorithm, the ‘end-points’ as well as the length of the repeats have been stored. The next part can be explained with the help of the figure () where the same strings 
‘KLN’ and ‘QLD’ have been taken as an example. As shown in , the array ‘startd’ contains the positions of the starting point of the ‘first sequence’ and the ‘second sequence’. Similarly, the array ‘endd’ contains 
the positions of the end points of the two sequences. The manner in which the algorithm stores the repeat sequence and the starting points and end points in the vector ‘vsubseq’ is identical to that of FAIR []. Then the 
algorithm sorts the repeats to remove the identical entries so as to produce non-redundant output of distant repeats.

Discussion
Case study 1
The sample output shown below is for the input protein sequence taken from Homo sapiens. The number of amino acid residues present in the input sequence is 2413. The minimum number of amino acids required to be present in a 
given distant repeat is 100 and the calculation is performed using the scores of PAM250 matrix. As can be seen, when the minimum number was set to 100, there are seven significant distant repeats with a minimum of 108 and maximum 
of 257 amino acid residues. Whereas, when the minimum number of amino acid residues in a repeat was set to 50, a significant set of repeats was identified. The algorithm produces four distant repeats of length 64 residues and 
implies that these domains of repeat in Homo sapiens () should have originated due to duplication events and may be involved in any eminent biological function. 

Case study 2
The sample output shown in  is for the input protein sequence taken from Streptococcus pneumoniae TIGR4. The number of amino acid residues present in the input sequence is 857. The minimum number of amino acids required to 
be present in a given distant repeat is 100 and the calculation is performed using the scores of PAM250 matrix. The case study in  using the protein sequence from Streptococcus pneumoniae gives a total number of two distant 
repeats, when the minimum number of amino acid repeats was set to 100; two significant distant repeats with a minimum of 156 and a maximum of 308 amino acid residues were found. As can be seen, the distant repeat containing 156 amino acid 
residues is a sub-set of the other distant repeat containing 308 amino acid residues.

Conclusion
An algorithm has been proposed to identify all the distant repeats present in a given protein sequence. PAM matrix scores are deployed for the identification of the distant repeats. Identification of such repeats in a protein sequence 
would aid the researchers to study the correlation of distant repeats with respect to their structure and function in the evolutionary process. Thus, distant repeats can be exploited to study the individual protein by their evolutionary 
conserved repeats and for modeling the three-dimensional structure of unknown proteins by their similar folding topology. 

Supplementary material
Data 1
The facilities of the Bioinformatics Centre (DIC), the Interactive Graphics Based Molecular Modeling facility (IGBMM) and the Supercomputer Education and Research Centre (SERC) are gratefully acknowledged. The corresponding author 
(KS) thanks the Department of Information Technology for financial support. 

Alignment of subsequences (KLN and QLD) to detect the distant repeats in a protein sequence.

An illustration of case study 1 is shown. (a) input sequence to the algorithm; (b) and (c) output results.

An illustration of case study 1 is shown with input sequence to the algorithm and output results.

