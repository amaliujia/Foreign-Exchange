Background
Serial analysis of gene expression (SAGE) is a technique that allows global profiling of gene expression in a genome without a priori 
knowledge []. The SAGE technique enables biologists to identify a series of 
short sequences, as well as the count of each sequence (SAGE tag) for the gene expression profile of cell or tissue types. Each short 
sequence is collected in a SAGE library, and the count of each short sequence represents the gene expression of its corresponding genes. 
Recently, many public gene expression profile platforms have been developed for use in SAGE analysis. However, most of these platforms 
are restricted to only two groups of paired comparison and analysis, and the displayed results are often long-winded and show poor 
ranking [,]. Therefore, it is 
necessary to extract, filter and arrange the useful information a way applicable to profile gene expressions, especially when it comes 
to multiple SAGE libraries containing myriad biological samples. In this study, we construct a cross-analysis method with visualized 
output for SAGE data analysis, along with retrieval of the corresponding information between SAGE tags and genes. A genetic algorithm 
(GA) is introduced to facilitate the analysis and accuracy of the SAGE data available to biologists, thus avoiding manual browsing and 
comparison of the original SAGE data.

Methodology
Implementation
Extract‐SAGE is programmed in the JAVA language [] and compatible to 
many computer platforms. We analyzed 327 samples of Homo sapiens SAGE data in various types of samples from NCBI SAGEmap 
[], i.e. as brain, kidney, breast, ovary, and colon data, amongst others. For 
tag to gene data, restriction enzymes NlaIII and Sau3A generated the SAGEmap []. 
A filtering process of gene expression data was implemented to extract significant tags and abandon trifling tags by incorporating set 
theory []. A GA was used to implement the feature selection process, and the 
K‐nearest neighbor (KNN) method was used to evaluate the classification accuracy [].

Software description
 shows three functions provided by Extract‐SAGE, i.e. 1) cross‐analysis, 
2) tag to gene, and 3) reducing‐analysis (using GA). The “cross‐analysis” function provides significant 
genes extracted by setting some operation conditions and difference factors between samples or sample groups of interest. Two output 
results, a tabular and graphic form, are provided. Both of them contain tag expression (tag per million, tpm) information of each group, 
and can be sorted based on the expression in the selected group or the expression difference between two selected groups. The graphic 
visualization of the results in gradient colors for the tag count in various samples is convenient for selecting gene candidates of 
interest. Tags with high or low expression (tpm) are easy to identify, and a set of key tags of curative or pathogenic genes is also 
provided. Users can submit a tag sequence with the “tag to gene” function to retrieve the corresponding information 
between tags and genes.

Relevant genes in huge output genes can be extracted with the “reducing‐analysis” function. After inputting 
huge sample data in a defined format, the GA function provides a class labeling selection, e.g. cases and controls, for each sample, and 
the representative tags are output with accurate evaluation. Setting a higher population and a higher number of generations (GA 
parameters) results in higher performance (higher accuracy and fewer genes).

Conclusion remarks
Extract‐SAGE constitutes a novel, effective and accurate SAGE analysis platform for comparison of multiple libraries. Common 
or tissue‐ and cancer‐specific biomarkers can easily be mined in silico.

This work was partly supported by the National Science Council in Taiwan under grant NSC97-2622-E-151-008-CC2, 
NSC96-2221-E-214-050-MY3, NSC96-2622-E-151-019-CC3, and KMU-EM-97-1.1b.

Citation:Yang et al., Bioinformation 3(7): 291-292 (2009)

Screenshot of Extract‐SAGE. (A) The main window. Demonstration of (B) cross-analysis result, (C) tag to gene results, and (D) extract result using GA.

