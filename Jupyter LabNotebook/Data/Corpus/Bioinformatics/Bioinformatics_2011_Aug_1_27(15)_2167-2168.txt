1 INTRODUCTION
The XML-based Systems Biology Markup Language (SBML, ()) is the de facto standard file format for the storage and exchange of quantitative computational models in systems biology, supported by more than 210 software packages to date (March 2011). Much of this success is due to its clearly defined specifications and the availability of libSBML (), a portable, robust, full-featured and easy-to-use library.

LibSBML provides many methods for the manipulation and validation of SBML files through its Application Programming Interface (API). Primarily written in C and C++, libSBML also provides automatically generated language bindings for Java™, among other programming languages. However, the full platform independence brought by the use of Java is limited in libSBML because the binding is only a wrapper around the C/C++ core, implemented using the Java Native Interface (JNI). As a consequence, some software developers experience difficulties deploying portable libSBML-based Java applications. Several groups in the SBML community thus began to develop their own Java libraries for SBML. To avoid needless duplication, some of these groups recently pooled their efforts and created JSBML, an open-source project to develop a pure Java library for SBML.

The primary aim of the project is to provide an API that maps all SBML elements to a flexible and extended Java type hierarchy. Where possible, JSBML strives for 100% compatibility with libSBML's Java API, to ease the transition from one library to the other. There are currently no plans to re-implement the more complex functionalities of libSBML, such as model consistency checking, SBML validation and conversion between different SBML Levels and Versions; separate community efforts are under way to provide such libSBML facilities via web services.

The software produced by the project is freely available from http://sbml.org/Software/JSBML.

2 IMPLEMENTATION
A key achievement of the JSBML project is the development of an extended type hierarchy, designed from scratch based on the SBML specifications, but still following the naming conventions of methods and classes in libSBML. For each element defined in at least one SBML Level/Version combination, JSBML provides a corresponding class reflecting all its properties. SBML elements or attributes not part of higher SBML Levels (removed or made obsolete) are marked as deprecated. JSBML defines superclasses or interfaces for elements that share common properties. For instance, the interface NamedSBase does not directly correspond to a data type in one of the SBML specifications, but serves as the superclass of all SBase-derived classes that can be addressed by an identifier and a name. Similarly, all classes that may contain a mathematical expression implement the interface MathContainer. A full overview of this type hierarchy can be found in the Supplementary Material associated with this article. JSBML also supports SBML notes in XHTML format, as well as SBML annotations, including MIRIAM identifiers () and SBO terms (). When building JSBML, the latest SBO OBO export can directly be downloaded and parsed (). The Model class provides several methods, all beginning with the name find*, for querying SBML elements. Filters enable users to search lists for elements that possess specific properties. All ListOf* elements in JSBML implement Java's List interface, making iteration and the use of generic Java types possible.  demonstrates how the hierarchically structured content of an SBML file can be easily visualized in the form of a tree.
(a) The SBML parser in JSBML understands the hierarchical data structure of SBML; (b) Example for SBML test case 26. Using JSBML for reading and visualizing an SBML file. The type SBase extends the Java interfaces Serializable for saving JSBML objects in binary form or sending them over a network connection, Cloneable for creating deep object copies and TreeNode. The last interface allows callers to apply any recursive operation, such as using JTree for display [see (b) for an example].



JSBML includes parsers that read mathematical formulas in both MathML format and an infix formula syntax. Internally, it converts formulas into an abstract syntax tree representation; it can write out the trees in MathML, infix and  formula notations. In addition, although JSBML does not implement full-featured consistency checking of SBML models, it does throw Java exceptions in some situations to prevent users from creating invalid content. It implements a check for overdetermined models using the algorithm of (); this is also used to identify variables in algebraic rules. Further, JSBML can automatically derive the units of a mathematical expression. Whenever a property of some SBase is altered, an SBaseChangeEvent is fired that notifies dedicated listeners. As one possible application, graphical user interfaces could automatically react when the model is changed. Using modules, JSBML capabilities can be further extended; it can therefore be used as a communication layer between an application and libSBML or CellDesigner ()—this also facilitates turning an existing application into a plugin for CellDesigner.

3 CONCLUSION
JSBML is an ongoing project that provides comprehensive and entirely Java-based data structures to read, write and manipulate SBML files. Its layered architecture allows for the creation of Java Web Start applications and CellDesigner plugins based on stand-alone programs with very little effort. New versions of SBMLsqueezer () and Biomodels Database () have already been released using JSBML. Many other projects are planned.

Funding: National Institute of General Medical Sciences (NIGMS, USA); funds from EMBL-EBI (Germany, UK); Federal Ministry of Education and Research (BMBF, Germany) in the projects Virtual Liver and Spher4Sys (grant numbers 0315756 and 0315384C). The grant number for the NIH grant that was, among others, used for the JSBML article reads 2R01GM070923.

Conflict of Interest: none declared.

